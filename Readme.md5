# Pacifica Groups - Guest Wi-Fi Captive Portal

ระบบลงทะเบียนและยืนยันตัวตนสำหรับผู้ใช้งาน Wi-Fi ชั่วคราว (Guest Wi-Fi) ทำงานร่วมกับ FortiGate Firewall โดยใช้ Raspberry Pi เป็นเซิร์ฟเวอร์สำหรับหน้าลงทะเบียน

## ภาพรวม (Overview)

โปรเจกต์นี้สร้างขึ้นเพื่อแก้ปัญหาการจัดการผู้ใช้ Guest Wi-Fi โดยเปลี่ยนจากระบบที่ต้องให้เจ้าหน้าที่สร้าง User ให้ มาเป็นระบบที่ผู้ใช้สามารถลงทะเบียนได้ด้วยตนเอง (Self-Registration) ผ่านหน้าเว็บที่สวยงามและเป็นแบรนด์ขององค์กร เมื่อผู้ใช้ลงทะเบียนสำเร็จ ระบบจะสร้างบัญชีผู้ใช้บน FortiGate Firewall และเพิ่มเข้าสู่ User Group ที่กำหนดโดยอัตโนมัติ พร้อมทั้งมีระบบจัดการอายุการใช้งานเพื่อลบผู้ใช้ออกจาก Group เมื่อครบกำหนดเวลา

## คุณสมบัติหลัก (Features)

  - **Guest Self-Registration:** ผู้ใช้สามารถลงทะเบียนได้ด้วยตนเองผ่านหน้าเว็บ
  - **FortiGate API Integration:** สร้างและจัดการผู้ใช้บน FortiGate ผ่าน API โดยอัตโนมัติ
  - **Customizable UI:** หน้าลงทะเบียนและหน้า Login สามารถปรับแต่งให้เข้ากับแบรนด์ขององค์กรได้
  - **Automatic User Expiration:** มีระบบล้างผู้ใช้ที่หมดอายุ (12 ชั่วโมง) ออกจาก Group โดยอัตโนมัติผ่าน Cron Job
  - **Single Device Login:** จำกัดให้ 1 บัญชีผู้ใช้สามารถ Login ได้ทีละ 1 อุปกรณ์เท่านั้น
  - **Session History:** เก็บประวัติการลงทะเบียนทั้งหมดไว้ในฐานข้อมูล SQLite
  - **Containerized Deployment:** รันแอปพลิเคชันทั้งหมดใน Docker ทำให้ง่ายต่อการจัดการและย้ายระบบ

## สถาปัตยกรรมและเทคโนโลยี (Architecture & Technology Stack)

  - **Hardware:**
      - Raspberry Pi (4 or newer recommended)
      - FortiGate Firewall
  - **Software:**
      - **Host OS:** Raspberry Pi OS Lite (64-bit)
      - **Backend:** Python 3 + Flask
      - **Web Server / Proxy:** Nginx
      - **Database:** SQLite 3
      - **Containerization:** Docker & Docker Compose

## 🚀 ขั้นตอนการติดตั้ง (Installation Guide)

### 1\. การตั้งค่าบน FortiGate Firewall

1.  **สร้าง REST API Admin:**
      - ไปที่ `System > Administrators` \> `Create New > REST API Admin`
      - ตั้งค่า Profile ให้มีสิทธิ์ `Read-Write` ในส่วนของ `User & Device`
      - จำกัด IP Address ให้เป็นของ Raspberry Pi และคัดลอก **API Key** เก็บไว้
2.  **สร้าง User Group:**
      - ไปที่ `User & Authentication > User Groups` \> `Create New`
      - **Name:** `Guest-Group`
      - **Type:** `Firewall`
3.  **สร้าง Address Objects:**
      - ไปที่ `Policy & Objects > Addresses` \> `Create New`
      - สร้าง Object สำหรับ Raspberry Pi (เช่น `Portal_Server_RPi`), DNS (เช่น `Google_DNS`), และ FQDN สำหรับ Apple/Google Captive Check
4.  **ตั้งค่า Interface สำหรับ Guest:**
      - ไปที่ `Network > Interfaces` แล้วแก้ไข VLAN Interface ของ Guest
      - **Security mode:** `Captive Portal`
      - **Authentication portal:** `Local`
      - **Exempt destinations/services:** เพิ่ม Address Object ทั้งหมดที่สร้างในข้อ 3
5.  **สร้าง Firewall Policies:**
      - **Policy 1 (Pre-Auth):**
          - `Incoming`: `VLAN GUEST`, `Outgoing`: `any`
          - `Source`: `all`
          - `Destination`: `Portal_Server_RPi`, `Google_DNS`, และ FQDN Objects
          - `Action`: `ACCEPT`, `NAT`: `Enabled`, `User`: **(ปล่อยว่าง)**
      - **Policy 2 (Post-Auth):**
          - `Incoming`: `VLAN GUEST`, `Outgoing`: `wan1`
          - `Source`: `all`
          - `Destination`: `all`
          - `Action`: `ACCEPT`, `NAT`: `Enabled`, `User`: `Guest-Group`
      - **ลำดับ:** Policy 1 ต้องอยู่เหนือ Policy 2
6.  **ปรับแต่งหน้า Login:**
      - ไปที่ `System > Replacement Messages` \> `Firewall Authentication` \> `Login Page`
      - แก้ไขโค้ด HTML เพื่อเพิ่มปุ่ม/ลิงก์สำหรับ Register ไปยัง `http://<IP_RASPBERRY_PI>/register`
7.  **ตั้งค่า 1 User/Device (CLI):**
    ```
    config user setting
        set auth-concurrent-override enable
        set auth-concurrent-value 1
    end
    ```

### 2\. การเตรียม Raspberry Pi

```bash
# อัปเดตระบบ
sudo apt update && sudo apt upgrade -y
# ติดตั้ง Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
sudo usermod -aG docker ${USER}
# ติดตั้ง Docker Compose Plugin และเครื่องมืออื่นๆ
sudo apt install -y python3-pip docker-compose-plugin
# Logout แล้ว Login ใหม่เพื่อให้สิทธิ์ docker มีผล
```

### 3\. การตั้งค่าโปรเจกต์

1.  นำไฟล์โปรเจกต์ทั้งหมดไปวางที่ `~/pacifica-wifi` บน Raspberry Pi
2.  **แก้ไขค่าคอนฟิก:**
      - เปิดไฟล์ `~/pacifica-wifi/app/main.py` และ `~/pacifica-wifi/app/cleanup.py`
      - แก้ไขค่า `FORTIGATE_IP` และ `FORTIGATE_API_KEY` ให้ถูกต้อง

### 4\. การรันแอปพลิเคชันด้วย Docker

```bash
# เข้าไปที่โฟลเดอร์โปรเจกต์
cd ~/pacifica-wifi
# สั่ง Build และ Run
docker compose up --build -d
```

### 5\. การตั้งค่าระบบลบผู้ใช้หมดอายุ (Cron Job)

```bash
# เปิด crontab editor
crontab -e
# เพิ่มบรรทัดนี้ที่ท้ายไฟล์เพื่อรันสคริปต์ทุกชั่วโมง
0 * * * * /usr/bin/python3 /home/pacifica/pacifica-wifi/app/cleanup.py >> /home/pacifica/pacifica-wifi/cleanup.log 2>&1
```

## โครงสร้างไฟล์ (Project Structure)

```
pacifica-wifi/
├── app/
│   ├── static/
│   │   └── style.css
│   ├── templates/
│   │   ├── register.html
│   │   ├── registered.html
│   │   └── base.html
│   ├── main.py         # แอปพลิเคชันหลัก (Flask)
│   ├── cleanup.py      # สคริปต์ลบผู้ใช้หมดอายุ
│   ├── guests.db       # ไฟล์ฐานข้อมูล SQLite
│   └── requirements.txt
├── docker-compose.yml
├── Dockerfile
└── nginx/
    └── nginx.conf
```

## การแก้ไขปัญหา (Troubleshooting)

  - **ดู Log ของแอปพลิเคชัน:** `docker logs -f pacifica_webapp`
  - **หยุดและลบ Container:** `docker compose down`
  - **ตรวจสอบสถานะ Container:** `docker ps -a`
